{% set fabric_switches = [] %}
{% set topology_links = [] %}
{% set underlay_p2p_network_summaries = [] %}
{% set overlay_loopback_network_summaries = [] %}
{% set vtep_loopback_network_summaries = [] %}
{% set assigned_ip_addresses = [] %}
{% set interfaces_done = [] %}
{% for node in groups[fabric_name] | arista.avd.natural_sort %}
{%     if hostvars[node].type | arista.avd.default('undefined') in ['spine', 'l3leaf', 'l2leaf', 'super-spine', 'overlay-controller'] %}
{# Populate network summaries #}
{%         do underlay_p2p_network_summaries.append(hostvars[node].underlay_p2p_network_summary | arista.avd.default()) %}
{%         do underlay_p2p_network_summaries.append(hostvars[node].super_spine_underlay_p2p_network_summary | arista.avd.default()) %}
{%         do underlay_p2p_network_summaries.append(hostvars[node].overlay_controller_p2p_network_summary | arista.avd.default()) %}
{%         do overlay_loopback_network_summaries.append(hostvars[node].overlay_loopback_network_summary | arista.avd.default()) %}
{%         do overlay_loopback_network_summaries.append(hostvars[node].super_spine_loopback_network_summary | arista.avd.default()) %}
{%         do overlay_loopback_network_summaries.append(hostvars[node].overlay_controller_loopback_network_summary | arista.avd.default()) %}
{%         do vtep_loopback_network_summaries.append(hostvars[node].vtep_loopback_network_summary | arista.avd.default()) %}
{# Populate fabric_switch #}
{%         set fabric_switch = namespace() %}
{%         set fabric_switch.pod = hostvars[node].pod_name | arista.avd.default(hostvars[node].dc_name, fabric_name) %}
{%         set fabric_switch.type = hostvars[node].type %}
{%         set fabric_switch.node = node %}
{%         set fabric_switch.mgmt_ip = hostvars[node].switch_mgmt_ip | arista.avd.default('-') %}
{%         do assigned_ip_addresses.append(hostvars[node].switch_mgmt_ip) if hostvars[node].switch_mgmt_ip is arista.avd.defined %}
{%         for interface in hostvars[node].management_interfaces | arista.avd.natural_sort %}
{%             if hostvars[node].management_interfaces[interface].ip_address is arista.avd.defined and hostvars[node].management_interfaces[interface].ip_address != fabric_switch.mgmt_ip %}
{%                 set fabric_switch.inband_mgmt_ip = hostvars[node].management_interfaces[interface].ip_address %}
{%                 set fabric_switch.inband_mgmt_interface = interface %}
{%             endif %}
{%         endfor %}
{%         set fabric_switch.platform = hostvars[node].switch_platform | arista.avd.default('-') %}
{%         set fabric_switch.provisioned = 'Not Available' if hostvars[node].is_deployed is arista.avd.defined(false) else 'Provisioned' %}
{%         if hostvars[node].loopback_interfaces is arista.avd.defined and hostvars[node].loopback_interfaces.Loopback0 is arista.avd.defined %}
{%             if hostvars[node].loopback_interfaces.Loopback0.ip_address is arista.avd.defined %}
{%                 set fabric_switch.loopback0_ip_address = hostvars[node].loopback_interfaces.Loopback0.ip_address %}
{%                 do assigned_ip_addresses.append(fabric_switch.loopback0_ip_address) %}
{%             endif %}
{%         endif %}
{%         if hostvars[node].loopback_interfaces is arista.avd.defined and hostvars[node].loopback_interfaces.Loopback1 is arista.avd.defined %}
{%             if hostvars[node].loopback_interfaces.Loopback1.ip_address is arista.avd.defined %}
{%                 set fabric_switch.loopback1_ip_address = hostvars[node].loopback_interfaces.Loopback1.ip_address %}
{%                 do assigned_ip_addresses.append(fabric_switch.loopback1_ip_address) %}
{%             endif %}
{%         endif %}
{%         if hostvars[node].router_isis is arista.avd.defined and hostvars[node].router_isis.net is arista.avd.defined %}
{%             set fabric_switch.router_isis_net = hostvars[node].router_isis.net %}
{%         endif %}
{%         do fabric_switches.append(fabric_switch) %}
{# Populate topology_links #}
{%         for ethernet_interface in hostvars[node].ethernet_interfaces | arista.avd.natural_sort %}
{%             if hostvars[node].ethernet_interfaces[ethernet_interface].peer_type | arista.avd.default('undefined') in ['mlag_peer', 'spine', 'l3leaf', 'l2leaf', 'super-spine', 'overlay-controller'] %}
{%                 do interfaces_done.append(node ~ "," ~ ethernet_interface) %}
{%                 set peer = hostvars[node].ethernet_interfaces[ethernet_interface].peer %}
{%                 set peer_interface = hostvars[node].ethernet_interfaces[ethernet_interface].peer_interface %}
{%                 if peer is arista.avd.defined and peer_interface is arista.avd.defined and peer ~ "," ~ peer_interface not in interfaces_done %}
{%                     set topology_link = namespace() %}
{%                     set topology_link.type = hostvars[node].type %}
{%                     set topology_link.node = node %}
{%                     set topology_link.node_interface = ethernet_interface %}
{%                     set topology_link.node_ip_address = hostvars[node].ethernet_interfaces[ethernet_interface].ip_address %}
{%                     if topology_link.node_ip_address is arista.avd.defined %}
{%                         do assigned_ip_addresses.append(topology_link.node_ip_address) %}
{%                     endif %}
{%                     set topology_link.peer_type = hostvars[node].ethernet_interfaces[ethernet_interface].peer_type %}
{%                     set topology_link.peer = peer %}
{%                     set topology_link.peer_interface = peer_interface %}
{%                     set topology_link.peer_ip_address = none %}
{%                     if hostvars[peer] is arista.avd.defined and hostvars[peer].ethernet_interfaces is arista.avd.defined %}
{%                         if hostvars[peer].ethernet_interfaces[peer_interface] is arista.avd.defined %}
{%                             if hostvars[peer].ethernet_interfaces[peer_interface].ip_address is arista.avd.defined %}
{%                                 set topology_link.peer_ip_address = hostvars[peer].ethernet_interfaces[peer_interface].ip_address %}
{%                                 do assigned_ip_addresses.append(topology_link.peer_ip_address) %}
{%                             endif %}
{%                         endif %}
{%                     endif %}
{%                     do topology_links.append(topology_link) %}
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{% endfor %}
{% set underlay_p2p_network_summaries = underlay_p2p_network_summaries | unique | reject("none") %}
{% set overlay_loopback_network_summaries = overlay_loopback_network_summaries | unique | reject("none") %}
{% set vtep_loopback_network_summaries = vtep_loopback_network_summaries | unique | reject("none") %}
# {{ fabric_name }}

## Table of Contents

- [{{ fabric_name }}](#{{ fabric_name | replace('_',"") | lower }})
  - [Fabric Switches and Management IP](#fabric-switches-and-management-ip)
  - [Fabric Topology](#fabric-topology)
  - [Fabric IP Allocation](#fabric-ip-allocation)
    - [Fabric Point-To-Point Links](#fabric-point-to-point-links)
    - [Point-To-Point Links Node Allocation](#point-to-point-links-node-allocation)
    - [Overlay Loopback Interfaces (BGP EVPN Peering)](#overlay-loopback-interfaces-bgp-evpn-peering)
    - [Loopback0 Interfaces Node Allocation](#loopback0-interfaces-node-allocation)
{% if underlay_routing_protocol|lower == "isis" %}
    - [CLNS Interfaces](#isis-clns-interfaces)
{% endif %}
    - [VTEP Loopback VXLAN Tunnel Source Interfaces (Leafs Only)](#vtep-loopback-vxlan-tunnel-source-interfaces-leafs-only)
    - [VTEP Loopback Node allocation](#vtep-loopback-node-allocation)

## Fabric Switches and Management IP

| POD | Type | Node | Management IP | Platform | Provisioned in Cloudvision |
| --- | ---- | ---- | ------------- | -------- | -------------------------- |
{% for fabric_switch in fabric_switches %}
| {{ fabric_switch.pod }} | {{ fabric_switch.type }} | {{ fabric_switch.node }} | {{fabric_switch.mgmt_ip }} | {{ fabric_switch.platform }} | {{ fabric_switch.provisioned }} |
{% endfor %}

> Provision status is based on Ansible inventory declaration and do not represent real status from Cloudvision.

### Fabric Switches with inband Management IP
| POD | Type | Node | Management IP | Inband Interface |
| --- | ---- | ---- | ------------- | ---------------- |
{% for fabric_switch in fabric_switches %}
{%     if fabric_switch.inband_mgmt_ip is arista.avd.defined %}
| {{ fabric_switch.pod }} | {{ fabric_switch.type }} | {{ fabric_switch.node }} | {{fabric_switch.inband_mgmt_ip }} | {{fabric_switch.inband_mgmt_interface }} |
{%     endif %}
{% endfor %}

## Fabric Topology

| Type | Node | Node Interface | Peer Type | Peer Node | Peer Interface |
| ---- | ---- | -------------- | --------- | ----------| -------------- |
{% for topology_link in topology_links %}
| {{ topology_link.type }} | {{ topology_link.node }} | {{topology_link.node_interface }} | {{ topology_link.peer_type }} | {{ topology_link.peer }} | {{ topology_link.peer_interface }} |
{% endfor %}

## Fabric IP Allocation

### Fabric Point-To-Point Links

| P2P Summary | Available Addresses | Assigned addresses | Assigned Address % |
| ----------- | ------------------- | ------------------ | ------------------ |
{% for underlay_p2p_network_summary in underlay_p2p_network_summaries | arista.avd.natural_sort %}
{%     set size = underlay_p2p_network_summary | ipaddr('size') %}
{%     set used = assigned_ip_addresses | ipaddr(underlay_p2p_network_summary) | length %}
| {{ underlay_p2p_network_summary }} | {{ size }} | {{ used }} | {{ (used / size * 100) | round(2,'ceil') }} % |
{% endfor %}

### Point-To-Point Links Node Allocation

| Node | Node Interface | Node IP Address | Peer Node | Peer Interface | Peer IP Address |
| ---- | -------------- | --------------- | --------- | -------------- | --------------- |
{% for topology_link in topology_links %}
{%     if topology_link.node_ip_address is arista.avd.defined and topology_link.peer_ip_address is arista.avd.defined %}
| {{ topology_link.node }} | {{topology_link.node_interface }} | {{ topology_link.node_ip_address }} | {{ topology_link.peer }} | {{ topology_link.peer_interface }} | {{ topology_link.peer_ip_address }} |
{%     endif %}
{% endfor %}

### Overlay Loopback Interfaces (BGP EVPN Peering)

| Overlay Loopback Summary | Available Addresses | Assigned addresses | Assigned Address % |
| ------------------------ | ------------------- | ------------------ | ------------------ |
{% for overlay_loopback_network_summary in overlay_loopback_network_summaries | arista.avd.natural_sort %}
{%     set size = overlay_loopback_network_summary | ipaddr('size') %}
{%     set used = assigned_ip_addresses | ipaddr(overlay_loopback_network_summary) | length %}
| {{ overlay_loopback_network_summary }} | {{ size }} | {{ used }} | {{ (used / size * 100) | round(2,'ceil') }} % |
{% endfor %}

### Loopback0 Interfaces Node Allocation

| POD | Node | Loopback0 |
| --- | ---- | --------- |
{% for fabric_switch in fabric_switches %}
{%     if fabric_switch.loopback0_ip_address is arista.avd.defined %}
| {{ fabric_switch.pod }} | {{ fabric_switch.node }} | {{ fabric_switch.loopback0_ip_address }} |
{%     endif %}
{% endfor %}

{% if underlay_routing_protocol|lower == "isis" %}
### ISIS CLNS interfaces

| POD | Node | CLNS Address |
| --- | ---- | ------------ |
{% for fabric_switch in fabric_switches %}
{%     if fabric_switch.router_isis_net is arista.avd.defined %}
| {{ fabric_switch.pod }} | {{ fabric_switch.node }} | {{ fabric_switch.router_isis_net }} |
{%     endif %}
{% endfor %}

{% endif %}
### VTEP Loopback VXLAN Tunnel Source Interfaces (Leafs Only)

| VTEP Loopback Summary | Available Addresses | Assigned addresses | Assigned Address % |
| --------------------- | ------------------- | ------------------ | ------------------ |
{% for vtep_loopback_network_summary in vtep_loopback_network_summaries | arista.avd.natural_sort %}
{%     set size = vtep_loopback_network_summary | ipaddr('size') %}
{%     set used = assigned_ip_addresses | ipaddr(vtep_loopback_network_summary) | length %}
| {{ vtep_loopback_network_summary }} | {{ size }} | {{ used }} | {{ (used / size * 100) | round(2,'ceil') }} % |
{% endfor %}

### VTEP Loopback Node allocation

| POD | Node | Loopback1 |
| --- | ---- | --------- |
{% for fabric_switch in fabric_switches %}
{%     if fabric_switch.loopback1_ip_address is arista.avd.defined %}
| {{ fabric_switch.pod }} | {{ fabric_switch.node }} | {{ fabric_switch.loopback1_ip_address }} |
{%     endif %}
{% endfor %}
